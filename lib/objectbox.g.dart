// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'model/cart_model.dart';
import 'model/order_model.dart';
import 'model/product_model.dart';
import 'model/user.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 4673488945083285009),
      name: 'User',
      lastPropertyId: const IdUid(12, 3240263288303288533),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(5, 3683969749115902257),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1570454474151635918),
            name: 'password',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6221887960517618971),
            name: 'userId',
            type: 9,
            flags: 2080,
            indexId: const IdUid(2, 1804226603385882372)),
        ModelProperty(
            id: const IdUid(8, 736924977608240229),
            name: 'firstName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 7188765767286185547),
            name: 'lastName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 3103801698641029617),
            name: 'phoneNumber',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 3559518417657218695),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(12, 3240263288303288533),
            name: 'role',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 4412652082864723391),
      name: 'Product',
      lastPropertyId: const IdUid(8, 8180331325696488109),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8195851419434360400),
            name: 'pid',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 890527283579173370),
            name: 'productID',
            type: 9,
            flags: 2080,
            indexId: const IdUid(3, 7824681784166087520)),
        ModelProperty(
            id: const IdUid(3, 996704446699158162),
            name: 'price',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6796718392327355131),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5962493791003043986),
            name: 'image',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6749625747800910132),
            name: 'weight',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 8180331325696488109),
            name: 'description',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 1949578143837667844),
      name: 'Cart',
      lastPropertyId: const IdUid(2, 3602332595611232877),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8577779577354869194),
            name: 'cid',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 3602332595611232877),
            name: 'cartID',
            type: 9,
            flags: 2080,
            indexId: const IdUid(4, 5200736977967571805))
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 7093275304270822886),
      name: 'Orders',
      lastPropertyId: const IdUid(3, 3441162782751203020),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1069533396510615928),
            name: 'oid',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 959830459917981190),
            name: 'status',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3441162782751203020),
            name: 'orderId',
            type: 9,
            flags: 2080,
            indexId: const IdUid(5, 4642072962257047130))
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(4, 7093275304270822886),
      lastIndexId: const IdUid(5, 4642072962257047130),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [5767170661440253984],
      retiredPropertyUids: const [
        2643038881002153745,
        1612718285661344359,
        7804387992630862223,
        2283470063385854552,
        6785997210612658074
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    User: EntityDefinition<User>(
        model: _entities[0],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) => {},
        getId: (User object) => object.id,
        setId: (User object, int id) {
          object.id = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          final passwordOffset = object.password == null
              ? null
              : fbb.writeString(object.password!);
          final userIdOffset =
              object.userId == null ? null : fbb.writeString(object.userId!);
          final firstNameOffset = object.firstName == null
              ? null
              : fbb.writeString(object.firstName!);
          final lastNameOffset = object.lastName == null
              ? null
              : fbb.writeString(object.lastName!);
          final phoneNumberOffset = object.phoneNumber == null
              ? null
              : fbb.writeString(object.phoneNumber!);
          final roleOffset =
              object.role == null ? null : fbb.writeString(object.role!);
          fbb.startTable(13);
          fbb.addOffset(4, emailOffset);
          fbb.addOffset(5, passwordOffset);
          fbb.addOffset(6, userIdOffset);
          fbb.addOffset(7, firstNameOffset);
          fbb.addOffset(8, lastNameOffset);
          fbb.addOffset(9, phoneNumberOffset);
          fbb.addInt64(10, object.id);
          fbb.addOffset(11, roleOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = User(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0),
              userId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              firstName: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18),
              lastName: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20),
              phoneNumber: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 22),
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              role: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 26),
              password: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14));

          return object;
        }),
    Product: EntityDefinition<Product>(
        model: _entities[1],
        toOneRelations: (Product object) => [],
        toManyRelations: (Product object) => {},
        getId: (Product object) => object.pid,
        setId: (Product object, int id) {
          object.pid = id;
        },
        objectToFB: (Product object, fb.Builder fbb) {
          final productIDOffset = object.productID == null
              ? null
              : fbb.writeString(object.productID!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final imageOffset =
              object.image == null ? null : fbb.writeString(object.image!);
          final weightOffset =
              object.weight == null ? null : fbb.writeString(object.weight!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          fbb.startTable(9);
          fbb.addInt64(0, object.pid);
          fbb.addOffset(1, productIDOffset);
          fbb.addFloat64(2, object.price);
          fbb.addOffset(3, nameOffset);
          fbb.addOffset(5, imageOffset);
          fbb.addOffset(6, weightOffset);
          fbb.addOffset(7, descriptionOffset);
          fbb.finish(fbb.endTable());
          return object.pid;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Product(
              productID: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              price: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 8),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              description: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18),
              image: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              weight: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              pid: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));

          return object;
        }),
    Cart: EntityDefinition<Cart>(
        model: _entities[2],
        toOneRelations: (Cart object) => [],
        toManyRelations: (Cart object) => {},
        getId: (Cart object) => object.cid,
        setId: (Cart object, int id) {
          object.cid = id;
        },
        objectToFB: (Cart object, fb.Builder fbb) {
          final cartIDOffset = fbb.writeString(object.cartID);
          fbb.startTable(3);
          fbb.addInt64(0, object.cid);
          fbb.addOffset(1, cartIDOffset);
          fbb.finish(fbb.endTable());
          return object.cid;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Cart(
              cid: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              cartID: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''));

          return object;
        }),
    Orders: EntityDefinition<Orders>(
        model: _entities[3],
        toOneRelations: (Orders object) => [],
        toManyRelations: (Orders object) => {},
        getId: (Orders object) => object.oid,
        setId: (Orders object, int id) {
          object.oid = id;
        },
        objectToFB: (Orders object, fb.Builder fbb) {
          final statusOffset =
              object.status == null ? null : fbb.writeString(object.status!);
          final orderIdOffset =
              object.orderId == null ? null : fbb.writeString(object.orderId!);
          fbb.startTable(4);
          fbb.addInt64(0, object.oid);
          fbb.addOffset(1, statusOffset);
          fbb.addOffset(2, orderIdOffset);
          fbb.finish(fbb.endTable());
          return object.oid;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Orders(
              oid: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              orderId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              status: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// see [User.email]
  static final email = QueryStringProperty<User>(_entities[0].properties[0]);

  /// see [User.password]
  static final password = QueryStringProperty<User>(_entities[0].properties[1]);

  /// see [User.userId]
  static final userId = QueryStringProperty<User>(_entities[0].properties[2]);

  /// see [User.firstName]
  static final firstName =
      QueryStringProperty<User>(_entities[0].properties[3]);

  /// see [User.lastName]
  static final lastName = QueryStringProperty<User>(_entities[0].properties[4]);

  /// see [User.phoneNumber]
  static final phoneNumber =
      QueryStringProperty<User>(_entities[0].properties[5]);

  /// see [User.id]
  static final id = QueryIntegerProperty<User>(_entities[0].properties[6]);

  /// see [User.role]
  static final role = QueryStringProperty<User>(_entities[0].properties[7]);
}

/// [Product] entity fields to define ObjectBox queries.
class Product_ {
  /// see [Product.pid]
  static final pid = QueryIntegerProperty<Product>(_entities[1].properties[0]);

  /// see [Product.productID]
  static final productID =
      QueryStringProperty<Product>(_entities[1].properties[1]);

  /// see [Product.price]
  static final price = QueryDoubleProperty<Product>(_entities[1].properties[2]);

  /// see [Product.name]
  static final name = QueryStringProperty<Product>(_entities[1].properties[3]);

  /// see [Product.image]
  static final image = QueryStringProperty<Product>(_entities[1].properties[4]);

  /// see [Product.weight]
  static final weight =
      QueryStringProperty<Product>(_entities[1].properties[5]);

  /// see [Product.description]
  static final description =
      QueryStringProperty<Product>(_entities[1].properties[6]);
}

/// [Cart] entity fields to define ObjectBox queries.
class Cart_ {
  /// see [Cart.cid]
  static final cid = QueryIntegerProperty<Cart>(_entities[2].properties[0]);

  /// see [Cart.cartID]
  static final cartID = QueryStringProperty<Cart>(_entities[2].properties[1]);
}

/// [Orders] entity fields to define ObjectBox queries.
class Orders_ {
  /// see [Orders.oid]
  static final oid = QueryIntegerProperty<Orders>(_entities[3].properties[0]);

  /// see [Orders.status]
  static final status = QueryStringProperty<Orders>(_entities[3].properties[1]);

  /// see [Orders.orderId]
  static final orderId =
      QueryStringProperty<Orders>(_entities[3].properties[2]);
}
